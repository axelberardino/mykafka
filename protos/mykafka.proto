syntax = "proto3";

package mykafka;

message Error
{
  enum ErrCode
  {
    OK = 0;
    INVALID_FILENAME = 1;
    FILE_NOT_FOUND = 2;
    FILE_ERROR = 3;
    INDEX_ERROR = 4;
    LOG_ERROR = 5;
    PARTITION_ERROR = 6;
    TOPIC_ERROR = 7;
    NOT_FOUND = 8;
    NO_MESSAGE = 9;
  }
  ErrCode code = 1;
  string msg = 2;
}

message Void
{
}

message SendMessageRequest
{
  int32 producer_id = 1;
  string group_id = 2;
  string topic = 3;
  int32 partition = 4;
  bytes payload = 5;
}

message SendMessageResponse
{
  Error error = 1;
  int64 offset = 2;
}

message GetMessageRequest
{
  int32 consumer_id = 1;
  string group_id = 2;
  string topic = 3;
  int32 partition = 4;
  int64 offset = 5;
}

message GetMessageResponse
{
  Error error = 1;
  bytes payload = 2;
}

message GetOffsetsRequest
{
  string topic = 1;
  int32 partition = 2;
}

message GetOffsetsResponse
{
  int64 first_offset = 1;
  int64 commit_offset = 2;
  int64 last_offset = 3;
  Error error = 4;
}

message TopicPartitionRequest
{
  string topic = 1;
  int32 partition = 2;
  int64 max_segment_size = 3;
  int64 max_partition_size = 4;
  int64 segment_ttl = 5;
}

message BrokerInfoResponse
{
  string dump = 1;
}

service Broker
{
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {}
  rpc GetMessage(GetMessageRequest) returns (GetMessageResponse) {}
  rpc GetOffsets(GetOffsetsRequest) returns (GetOffsetsResponse) {}

  rpc CreatePartition(TopicPartitionRequest) returns (Error) {}
  rpc DeletePartition(TopicPartitionRequest) returns (Error) {}
  rpc DeleteTopic(TopicPartitionRequest) returns (Error) {}
  rpc BrokerInfo(Void) returns (BrokerInfoResponse) {}
}
